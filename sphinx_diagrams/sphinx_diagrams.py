import os
import posixpath
import subprocess
from os import path
from pathlib import Path
from subprocess import CalledProcessError, PIPE
from typing import Any, Dict, List, Tuple

import sphinx
from docutils import nodes
from docutils.nodes import Node
from docutils.parsers.rst import directives
from sphinx.application import Sphinx
from sphinx.errors import SphinxError
from sphinx.locale import __
from sphinx.util import logging
from sphinx.util.docutils import SphinxDirective, SphinxTranslator
from sphinx.util.i18n import search_image_for_language
from sphinx.util.osutil import ensuredir
from sphinx.writers.html import HTMLTranslator

OPTION_EXTRA_ARGS = "extra_args"
OPTION_FILENAME = "filename"

logger = logging.getLogger(__name__)


class DiagramsError(SphinxError):
    category = "Diagrams error"


class Diagrams(SphinxDirective):
    """
    Directive to insert arbitrary dot markup.
    """

    has_content = True
    required_arguments = 0
    optional_arguments = 1
    final_argument_whitespace = False
    option_spec = {
        "args": directives.unchanged,
        "filename": directives.unchanged_required,
    }

    def run(self) -> List[Node]:
        if self.arguments:
            document = self.state.document
            if self.content:
                return [
                    document.reporter.warning(
                        __("Only explicit path supported"), line=self.lineno
                    )
                ]
            argument = search_image_for_language(self.arguments[0], self.env)
            rel_filename, filename = self.env.relfn2path(argument)
            self.env.note_dependency(rel_filename)
            try:
                with open(filename, encoding="utf-8") as fp:
                    diagram_code = fp.read()
            except OSError:
                return [
                    document.reporter.warning(
                        __(
                            "External Diagrams file %r not found or reading "
                            "it failed"
                        )
                        % filename,
                        line=self.lineno,
                    )
                ]
            node = diagrams()
            node["code"] = diagram_code
            node["options"] = {"docname": self.env.docname}
            if OPTION_FILENAME not in self.options:
                raise DiagramsError("The :filename: argument must be passed.")
            node["options"][OPTION_FILENAME] = self.options[OPTION_FILENAME]

            if OPTION_EXTRA_ARGS in self.options:
                node["options"][OPTION_EXTRA_ARGS] = self.options[OPTION_EXTRA_ARGS]

            return [node]


class diagrams(nodes.General, nodes.Inline, nodes.Element):
    pass


def render_diagrams(
    self: SphinxTranslator, code: str, options: Dict, prefix: str = "diagrams"
) -> Tuple[str, str]:
    fname: str = options[OPTION_FILENAME]
    if not fname.endswith(".png"):
        fname += ".png"

    relfn = posixpath.join(self.builder.imgpath, fname)
    cwd = path.join(self.builder.outdir, self.builder.imagedir)
    outfn = path.join(cwd, fname)

    if path.isfile(outfn):
        return relfn, outfn

    ensuredir(path.dirname(outfn))

    python_args = ["python", "-", Path(fname).stem, "false"]

    if OPTION_EXTRA_ARGS in options:
        python_args.extend(options[OPTION_EXTRA_ARGS].split(" "))

    env = os.environ

    try:
        ret = subprocess.run(
            python_args,
            input=code.encode(),
            stdout=PIPE,
            stderr=PIPE,
            cwd=cwd,
            env=env,
            check=True,
        )
        if not path.isfile(outfn):
            raise DiagramsError(
                __(
                    "Diagrams did not produce an output file: '%r'. "
                    "Ensure the diagram filename is matching the one generated by your code.\n[stderr]\n%r\n"
                    "[stdout]\n%r"
                )
                % (outfn, ret.stderr, ret.stdout)
            )
        return relfn, outfn
    except OSError:
        logger.warning(__("The diagram python code could not be run."))
        if not hasattr(self.builder, "_diagrams_warned_dot"):
            self.builder._diagrams_warned_dot = {}  # type: ignore
        self.builder._diagrams_warned_dot["python"] = True  # type: ignore
        return None, None
    except CalledProcessError as exc:
        raise DiagramsError(
            __("dot exited with error:\n[stderr]\n%r\n" "[stdout]\n%r")
            % (exc.stderr, exc.stdout)
        )


def render_dot_html(
    self: HTMLTranslator,
    node: diagrams,
    code: str,
    options: Dict,
    prefix: str = "diagrams",
    imgcls: str = None,
    alt: str = None,
) -> None:
    try:
        fname, outfn = render_diagrams(self, code, options, prefix)
    except DiagramsError as exc:
        logger.warning(__("dot code %r: %s"), code, exc)
        raise nodes.SkipNode

    if imgcls:
        imgcls += " diagrams"
    else:
        imgcls = "diagrams"

    if fname is None:
        self.body.append(self.encode(code))
    else:
        if alt is None:
            alt = node.get("alt", self.encode(code).strip())
        if "align" in node:
            self.body.append(
                '<div align="%s" class="align-%s">' % (node["align"], node["align"])
            )
        self.body.append('<div class="graphviz">')
        self.body.append(
            '<a href="%s"><img src="%s" alt="%s" class="%s" /></a>'
            % (fname, fname, alt, imgcls)
        )
        self.body.append("</div>\n")
        if "align" in node:
            self.body.append("</div>\n")

    raise nodes.SkipNode


def html_visit_diagrams(self: HTMLTranslator, node: diagrams) -> None:
    render_dot_html(self, node, node["code"], node["options"])


def setup(app: Sphinx) -> Dict[str, Any]:
    app.add_node(diagrams, html=(html_visit_diagrams, None))
    app.add_directive("diagrams", Diagrams)
    return {"version": sphinx.__display_version__, "parallel_read_safe": True}
